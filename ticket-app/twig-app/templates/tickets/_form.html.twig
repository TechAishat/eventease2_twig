{% block styles %}
<style>
    .form-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 2rem;
    }
    
    .form-card {
        background: white;
        border-radius: 0.5rem;
        box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
        padding: 2rem;
    }
    
    .form-title {
        font-size: 1.5rem;
        font-weight: 600;
        color: #111827;
        margin-bottom: 1.5rem;
    }
    
    .form-group {
        margin-bottom: 1.5rem;
    }
    
    .form-label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
        color: #374151;
    }
    
    .form-input,
    .form-textarea,
    .form-select {
        width: 100%;
        padding: 0.5rem 0.75rem;
        border: 1px solid #d1d5db;
        border-radius: 0.375rem;
        font-size: 0.875rem;
        line-height: 1.5;
    }
    
    .form-input:focus,
    .form-textarea:focus,
    .form-select:focus {
        outline: none;
        border-color: #6366f1;
        box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.2);
    }
    
    .form-textarea {
        min-height: 150px;
        resize: vertical;
    }
    
    .btn-primary {
        display: inline-flex;
        align-items: center;
        padding: 0.625rem 1.25rem;
        background-color: #4f46e5;
        color: white;
        font-weight: 500;
        border-radius: 0.375rem;
        transition: background-color 0.2s;
    }
    
    .btn-primary:hover {
        background-color: #4338ca;
    }
    
    .btn-secondary {
        display: inline-flex;
        align-items: center;
        padding: 0.625rem 1.25rem;
        background-color: #e5e7eb;
        color: #374151;
        font-weight: 500;
        border-radius: 0.375rem;
        transition: background-color 0.2s;
        margin-right: 0.75rem;
    }
    
    .btn-secondary:hover {
        background-color: #d1d5db;
    }
    
    .error-message {
        margin-top: 0.25rem;
        font-size: 0.75rem;
        color: #ef4444;
    }
    
    .form-actions {
        display: flex;
        justify-content: flex-end;
        margin-top: 2rem;
        padding-top: 1.5rem;
        border-top: 1px solid #e5e7eb;
    }
    
    .char-count {
        font-size: 0.75rem;
        color: #6b7280;
        text-align: right;
        margin-top: 0.25rem;
    }
    
    .char-limit {
        color: #ef4444;
    }
</style>
{% endblock %}

{% block content %}
<div class="form-container">
    <div class="form-card">
        <h1 class="form-title">
            {{ title }}
        </h1>
        
        <form id="ticketForm" action="{{ form_action }}" method="POST">
            <div class="form-group">
                <label for="title" class="form-label">Title <span class="text-red-500">*</span></label>
                <input type="text" id="title" name="title" required 
                       class="form-input" 
                       placeholder="Enter a brief title for your ticket"
                       value="{{ ticket.title ?? '' }}"
                       maxlength="255">
                <div class="char-count">
                    <span id="titleCharCount">0</span>/255
                </div>
                <div id="titleError" class="error-message"></div>
            </div>
            
            <div class="form-group">
                <label for="description" class="form-label">Description <span class="text-red-500">*</span></label>
                <textarea id="description" name="description" required 
                          class="form-textarea" 
                          placeholder="Please provide a detailed description of the issue">{{ ticket.description ?? '' }}</textarea>
                <div class="char-count">
                    <span id="descCharCount">0</span>/5000
                </div>
                <div id="descriptionError" class="error-message"></div>
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div class="form-group">
                    <label for="status" class="form-label">Status</label>
                    <select id="status" name="status" class="form-select" {% if not is_admin and not is_edit %}disabled{% endif %}>
                        {% for value, label in statuses %}
                            <option value="{{ value }}" {% if (ticket.status ?? 'open') == value %}selected{% endif %}>
                                {{ label }}
                            </option>
                        {% endfor %}
                    </select>
                    <div id="statusError" class="error-message"></div>
                </div>
                
                <div class="form-group">
                    <label for="priority" class="form-label">Priority</label>
                    <select id="priority" name="priority" class="form-select">
                        {% for value, label in priorities %}
                            <option value="{{ value }}" {% if (ticket.priority ?? 'medium') == value %}selected{% endif %}>
                                {{ label }}
                            </option>
                        {% endfor %}
                    </select>
                    <div id="priorityError" class="error-message"></div>
                </div>
                
                {% if is_admin %}
                <div class="form-group">
                    <label for="assigned_to" class="form-label">Assign To</label>
                    <select id="assigned_to" name="assigned_to" class="form-select">
                        <option value="">Unassigned</option>
                        {% for user in users %}
                            <option value="{{ user.id }}" {% if (ticket.assigned_to ?? '') == user.id %}selected{% endif %}>
                                {{ user.name }} ({{ user.email }})
                            </option>
                        {% endfor %}
                    </select>
                    <div id="assignedToError" class="error-message"></div>
                </div>
                {% endif %}
                
                <div class="form-group">
                    <label for="due_date" class="form-label">Due Date</label>
                    <input type="date" id="due_date" name="due_date" 
                           class="form-input"
                           value="{{ ticket.due_date ? ticket.due_date|date('Y-m-d') : '' }}">
                    <div id="dueDateError" class="error-message"></div>
                </div>
            </div>
            
            <div class="form-actions">
                <a href="{{ path('tickets.index') }}" class="btn-secondary">
                    Cancel
                </a>
                <button type="submit" class="btn-primary">
                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                    </svg>
                    {{ submit_button }}
                </button>
            </div>
        </form>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const form = document.getElementById('ticketForm');
        const titleInput = document.getElementById('title');
        const descriptionInput = document.getElementById('description');
        const titleCharCount = document.getElementById('titleCharCount');
        const descCharCount = document.getElementById('descCharCount');
        
        // Update character counts
        function updateCharCounts() {
            titleCharCount.textContent = titleInput.value.length;
            descCharCount.textContent = descriptionInput.value.length;
            
            // Highlight if approaching limit
            if (titleInput.value.length > 200) {
                titleCharCount.classList.add('char-limit');
            } else {
                titleCharCount.classList.remove('char-limit');
            }
            
            if (descriptionInput.value.length > 4500) {
                descCharCount.classList.add('char-limit');
            } else {
                descCharCount.classList.remove('char-limit');
            }
        }
        
        // Initial count
        updateCharCounts();
        
        // Update on input
        titleInput.addEventListener('input', updateCharCounts);
        descriptionInput.addEventListener('input', updateCharCounts);
        
        // Form validation
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            
            // Reset error messages
            document.querySelectorAll('.error-message').forEach(el => el.textContent = '');
            
            let isValid = true;
            
            // Validate title
            if (titleInput.value.trim().length < 5) {
                document.getElementById('titleError').textContent = 'Title must be at least 5 characters long';
                isValid = false;
            }
            
            // Validate description
            if (descriptionInput.value.trim().length < 20) {
                document.getElementById('descriptionError').textContent = 'Description must be at least 20 characters long';
                isValid = false;
            }
            
            // If form is valid, submit it
            if (isValid) {
                // In a real app, you would send this to your server
                console.log('Form is valid, submitting...');
                showToast('{{ submit_button }} ticket successfully!');
                
                // For demo purposes, redirect after a short delay
                setTimeout(() => {
                    window.location.href = '{{ path('tickets.index') }}';
                }, 1500);
            } else {
                showToast('Please fix the errors in the form');
            }
        });
    });
    
    function showToast(message) {
        const toast = document.getElementById('toast');
        const toastMessage = document.getElementById('toast-message');
        
        toastMessage.textContent = message;
        toast.classList.remove('hidden');
        
        setTimeout(() => {
            toast.classList.add('hidden');
        }, 5000);
    }
</script>
{% endblock %}
